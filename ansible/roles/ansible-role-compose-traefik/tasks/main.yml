---
# tasks file for ansible-role-traefik
# Requires community.docker collection: ansible-galaxy collection install community.docker

# Use become as docker commands typically require root privileges
- name: Ensure Traefik setup runs with root privileges
  ansible.builtin.assert:
    that:
      - ansible_become is defined
      - ansible_become
    quiet: yes
    fail_msg: "This role requires root privileges (become: yes) to manage Docker resources."
  tags: always # Run this check always

# --- File Checks or Templating (Choose one approach) ---

- name: Check if required environment file exists
  ansible.builtin.stat:
    path: "{{ traefik_env_file }}"
  register: env_file_stat
  when: not traefik_template_env_file # Only run if not templating

- name: Fail if environment file is missing and not templated
  ansible.builtin.fail:
    msg: "Missing environment file {{ traefik_env_file }}. Please create it manually or set traefik_template_env_file=true."
  when:
    - not traefik_template_env_file
    - not env_file_stat.stat.exists

- name: Template environment file from role
  ansible.builtin.template:
    src: "{{ traefik_env_template }}"
    dest: "{{ traefik_env_file }}"
    owner: root
    group: root
    mode: '0600' # Restrict permissions for sensitive env files
  when: traefik_template_env_file # Only run if templating is enabled

- name: Check if required docker-compose file exists
  ansible.builtin.stat:
    path: "{{ traefik_compose_file }}"
  register: compose_file_stat
  when: not traefik_template_compose_file

- name: Fail if docker-compose file is missing and not templated
  ansible.builtin.fail:
    msg: "Missing compose file {{ traefik_compose_file }}. Please create it manually or set traefik_template_compose_file=true."
  when:
    - not traefik_template_compose_file
    - not compose_file_stat.stat.exists

- name: Template docker-compose file from role
  ansible.builtin.template:
    src: "{{ traefik_compose_template }}"
    dest: "{{ traefik_compose_file }}"
    owner: root
    group: root
    mode: '0644'
  when: traefik_template_compose_file

# --- Network Management ---

- name: Ensure required Docker networks exist
  community.docker.docker_network:
    name: "{{ item }}"
    state: present
  loop: "{{ traefik_required_networks }}"
  loop_control:
    label: "{{ item }}" # Makes loop output clearer

# --- Run Docker Compose ---

- name: Launch Traefik service using Docker Compose V2
  community.docker.docker_compose_v2:
    project_src: "{{ traefik_dir }}" # Directory containing compose file and .env
    files: # List containing the compose filename (relative to project_src)
      - "{{ traefik_compose_filename }}"
    env_files: # List containing the env filename (relative to project_src)
      - "{{ traefik_env_filename }}"
    project_name: "{{ traefik_project_name }}"
    state: present # Ensures services are running ('up -d')
    pull: always # Optional: ensure newest images are pulled
  register: compose_result

- name: Debug Docker Compose output
  ansible.builtin.debug:
    var: compose_result
    verbosity: 1 # Show only if -v is used

# --- Wait for Health ---

- name: Wait for Traefik container to become healthy
  # Use docker_container_info as docker_compose_v2 doesn't directly return health status easily
  community.docker.docker_container_info:
    name: "{{ traefik_container_name }}"
  register: container_info
  # Use 'until' to retry. Note the complex condition checks.
  until: >
    container_info.container is defined and
    container_info.container.State.Health is defined and
    container_info.container.State.Health.Status is defined and
    (
      container_info.container.State.Health.Status == 'healthy' or
      container_info.container.State.Health.Status == 'none' # Allow containers without healthcheck
    )
  retries: "{{ traefik_health_retries }}"
  delay: "{{ traefik_health_delay }}"
  # Don't fail the playbook *yet* if the loop finishes, register the result
  ignore_errors: yes # We handle failure explicitly below

# --- Handle Health Check Failure ---

- name: Check health check result and fail if unhealthy
  ansible.builtin.fail:
    msg: "Traefik container '{{ traefik_container_name }}' failed to become healthy after {{ traefik_health_retries * traefik_health_delay }} seconds. Final status: {{ container_info.container.State.Health.Status | default('N/A') }}"
  when: >
    container_info.container is not defined or
    container_info.container.State.Health is not defined or
    container_info.container.State.Health.Status is not defined or
    (
      container_info.container.State.Health.Status != 'healthy' and
      container_info.container.State.Health.Status != 'none'
    )
  register: health_check_failure # Register the failure itself

- name: Show Traefik logs on health check failure
  community.docker.docker_logs:
    name: "{{ traefik_container_name }}"
    tail: "{{ traefik_log_lines_on_fail }}"
  register: logs_output
  when: health_check_failure is failed # Only run if the previous task failed

- name: Display logs (if collected on failure)
  ansible.builtin.debug:
    msg: "{{ logs_output.logs }}"
  when:
    - health_check_failure is failed
    - logs_output.logs is defined

# --- Final Success Message ---

- name: Display success message if Traefik is healthy or has no health check
  ansible.builtin.debug:
    msg: "âœ… Traefik container '{{ traefik_container_name }}' is running. Status: {{ container_info.container.State.Health.Status | default('running (no health status)') }}"
  when: health_check_failure is not failed # Only show success if we didn't fail before